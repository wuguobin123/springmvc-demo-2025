worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;  # 增加连接数以提高并发能力
    use epoll;  # Linux下使用epoll提高性能
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 日志格式 - 包含更多调试信息
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    # 连接池配置 - 提升后端连接性能
    upstream springmvc_backend {
        server springmvc-app:8080;
        keepalive 32;  # 保持32个空闲连接
    }

    # HTTP服务器配置
    server {
        listen 80;
        server_name _;  # 接受所有域名（生产环境建议改为实际域名）
        
        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        
        # 访问日志
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;

        # Nginx测试端点
        location = /nginx-test {
            return 200 "Nginx is working\n";
            add_header Content-Type text/plain;
        }

        # 健康检查端点 - 直接代理到后端
        location = /api/health {
            proxy_pass http://springmvc_backend/api/health;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            access_log off;  # 健康检查不记录日志
        }

        # MCP SSE端点 - 长连接流式传输
        location = /api/mcp/sse {
            proxy_pass http://springmvc_backend/api/mcp/sse;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # SSE专用配置
            proxy_set_header Accept "text/event-stream";
            proxy_set_header Cache-Control "no-cache";
            proxy_set_header X-Accel-Buffering no;
            proxy_buffering off;
            chunked_transfer_encoding on;
            
            # 超时设置 - 支持长连接
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 86400s;  # 24小时
        }

        # MCP消息端点 - 长连接流式传输
        location = /api/mcp/message {
            proxy_pass http://springmvc_backend/api/mcp/message;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # SSE专用配置
            proxy_set_header Accept "text/event-stream";
            proxy_set_header Cache-Control "no-cache";
            proxy_set_header X-Accel-Buffering no;
            proxy_buffering off;
            chunked_transfer_encoding on;
            
            # 超时设置 - 支持长连接
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 86400s;  # 24小时
        }

        # AI流式输出端点
        location = /api/ai/stream {
            proxy_pass http://springmvc_backend/api/ai/stream;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Connection "";
            
            # SSE专用配置
            proxy_set_header Accept "text/event-stream";
            proxy_set_header Cache-Control "no-cache";
            proxy_set_header X-Accel-Buffering no;
            proxy_buffering off;
            chunked_transfer_encoding on;
            
            # 超时设置
            proxy_connect_timeout 1s;
            proxy_send_timeout 10s;
            proxy_read_timeout 3600s;  # 1小时
        }

        # 所有API路径的前缀匹配
        location ^~ /api/ {
            proxy_pass http://springmvc_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # 根路径 - 返回API信息页面
        location = / {
            return 200 '{"status":"ok","message":"SpringMVC Demo API Server","health_check":"/api/health","docs":"https://github.com/your-repo"}\n';
            add_header Content-Type application/json;
        }

        # 其他路径返回404
        location / {
            return 404 '{"status":"error","message":"Not Found"}\n';
            add_header Content-Type application/json;
        }

        # 错误页面配置
        error_page 502 503 504 /50x.json;
        location = /50x.json {
            return 502 '{"status":"error","message":"Backend service unavailable"}\n';
            add_header Content-Type application/json;
        }
    }

    # HTTPS服务器配置（可选，需要SSL证书）
    # 生产环境强烈建议启用HTTPS
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;  # 替换为你的域名
    #     
    #     # SSL证书配置
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     # SSL优化配置
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers on;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # 其他配置与HTTP相同...
    # }
    
    # HTTP到HTTPS重定向（启用HTTPS后取消注释）
    # server {
    #     listen 80;
    #     server_name your-domain.com;
    #     return 301 https://$server_name$request_uri;
    # }
}
